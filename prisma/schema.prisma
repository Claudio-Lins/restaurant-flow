// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  MANAGER
  CUSTOMER
  WAITER
  MODERATOR
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(ADMIN)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// RESTAURANT-FLOW
model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  address     String?
  phone       String?
  email       String?
  website     String?
  waiter      Waiter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Waiter {
  id           String     @id @default(cuid())
  name         String
  imageUrl     String?
  phone        String?
  email        String?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  order        Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String       @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  price       Int
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  ingredients Ingredient[]
  orderItem   OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  product     Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id        String   @id @default(cuid())
  name      String
  imageUrl  String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  tableNumber Int
  status      String
  waiter      Waiter      @relation(fields: [waiterId], references: [id])
  waiterId    String
  orderItems  OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
